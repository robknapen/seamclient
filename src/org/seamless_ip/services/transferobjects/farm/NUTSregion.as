/* wallace: NUTSregion.as
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 *  - Benny Johnsson; Lund University
 *  - Rob Knapen; Alterra, Wageningen UR
 *  - Michiel Rop; Alterra, Wageningen UR / ilionX
 *  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.farm
{
    import org.seamless_ip.services.transferobjects.capri.Country;
    import org.seamless_ip.services.transferobjects.farm.FADNregion;
    import org.seamless_ip.services.transferobjects.farm.IRegion;
	import org.seamless_ip.services.transferobjects.utils.IClonable;

	[Bindable]
	[RemoteClass(alias="org.seamless_ip.services.transferobjects.farm.NUTSregionTO")]

	public class NUTSregion implements IClonable, IRegion	{
		public function NUTSregion()
		{
		}	
			
		
		public var FADNRegion: FADNregion;
		public var id: String;
		public var label: String;
		public var label_gms: String;
		public var name: String;
		public var nitrogenDeposition: Number;
		public var nitrogenFixation: Number;
		public var nutslevel: int;
		public var ofCountry: Country;
		public var referenceYieldNonIrrigated: Number;
		public var referenceYieldirrigated: Number;
		public var shapeFileID: String;





		public function Clone():IClonable
		{
			var clone: NUTSregion = new NUTSregion();
			var item:IClonable;  
			clone.FADNRegion = (FADNregion)(this.FADNRegion .Clone());
			clone.id = this.id;
			clone.label = this.label;
			clone.label_gms = this.label_gms;
			clone.name = this.name;
			clone.nitrogenDeposition = this.nitrogenDeposition;
			clone.nitrogenFixation = this.nitrogenFixation;
			clone.nutslevel = this.nutslevel;
			clone.ofCountry = (Country)(this.ofCountry .Clone());
			clone.referenceYieldNonIrrigated = this.referenceYieldNonIrrigated;
			clone.referenceYieldirrigated = this.referenceYieldirrigated;
			clone.shapeFileID = this.shapeFileID;
			return clone;
		}
	}
	
	
}
