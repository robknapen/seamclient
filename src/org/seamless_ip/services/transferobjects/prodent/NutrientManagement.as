/* wallace: NutrientManagement.as
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 *  - Benny Johnsson; Lund University
 *  - Rob Knapen; Alterra, Wageningen UR
 *  - Michiel Rop; Alterra, Wageningen UR / ilionX
 *  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.prodent
{
    import mx.collections.ArrayCollection;
    import org.seamless_ip.services.transferobjects.prodent.IManagementPractice;
	import org.seamless_ip.services.transferobjects.utils.IClonable;

	[Bindable]
	[RemoteClass(alias="org.seamless_ip.services.transferobjects.prodent.NutrientManagementTO")]

	public class NutrientManagement implements IClonable, IManagementPractice	{
		public function NutrientManagement()
		{
			crops = new ArrayCollection();
		}	
			
		
		public var crops: ArrayCollection;
		public var extraInsurancePremium: Number;
		public var id: String;
		public var numberLevels: int;
		public var yieldchange25percent: Boolean;
		public var yieldchange33percent: Boolean;
		public var yieldchange40percent: Boolean;





		public function Clone():IClonable
		{
			var clone: NutrientManagement = new NutrientManagement();
			var item:IClonable;  
			for each (item in this.crops)
				clone.crops .addItem(item.Clone());
			clone.extraInsurancePremium = this.extraInsurancePremium;
			clone.id = this.id;
			clone.numberLevels = this.numberLevels;
			clone.yieldchange25percent = this.yieldchange25percent;
			clone.yieldchange33percent = this.yieldchange33percent;
			clone.yieldchange40percent = this.yieldchange40percent;
			return clone;
		}
	}
	
	
}
