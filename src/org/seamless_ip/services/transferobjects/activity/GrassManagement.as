/* wallace: GrassManagement.as
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 *  - Benny Johnsson; Lund University
 *  - Rob Knapen; Alterra, Wageningen UR
 *  - Michiel Rop; Alterra, Wageningen UR / ilionX
 *  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.activity
{
    import org.seamless_ip.services.transferobjects.farm.NUTSregion;
	import org.seamless_ip.services.transferobjects.utils.IClonable;

	[Bindable]
	[RemoteClass(alias="org.seamless_ip.services.transferobjects.activity.GrassManagementTO")]

	public class GrassManagement implements IClonable	{
		public function GrassManagement()
		{
		}	
			
		
		public var beginOfGrazingPeriod: int;
		public var biomassForFreshFodder: Number;
		public var biomassForHay: Number;
		public var biomassForPastureGrazing: Number;
		public var biomassForSilage: Number;
		public var endOfGrazingPeriod: Number;
		public var id: String;
		public var label_gms: String;
		public var nUTSRegion: NUTSregion;
		public var nitrogenUse: Number;
		public var nitrogenUseOrganic: Number;
		public var numberOfCuts: int;
		public var overallBiomass: Number;
		public var variableCostsConcerningGrasslandWithoutCostsOfHarvest: Number;
		public var variableCostsOfHarvestingOfFreshFodder: Number;
		public var variableCostsOfHarvestingOfHay: Number;
		public var variableCostsOfHarvestingOfPastureForGrazing: Number;
		public var variableCostsOfHarvestingOfSilage: Number;





		public function Clone():IClonable
		{
			var clone: GrassManagement = new GrassManagement();
			var item:IClonable;  
			clone.beginOfGrazingPeriod = this.beginOfGrazingPeriod;
			clone.biomassForFreshFodder = this.biomassForFreshFodder;
			clone.biomassForHay = this.biomassForHay;
			clone.biomassForPastureGrazing = this.biomassForPastureGrazing;
			clone.biomassForSilage = this.biomassForSilage;
			clone.endOfGrazingPeriod = this.endOfGrazingPeriod;
			clone.id = this.id;
			clone.label_gms = this.label_gms;
			clone.nUTSRegion = (NUTSregion)(this.nUTSRegion .Clone());
			clone.nitrogenUse = this.nitrogenUse;
			clone.nitrogenUseOrganic = this.nitrogenUseOrganic;
			clone.numberOfCuts = this.numberOfCuts;
			clone.overallBiomass = this.overallBiomass;
			clone.variableCostsConcerningGrasslandWithoutCostsOfHarvest = this.variableCostsConcerningGrasslandWithoutCostsOfHarvest;
			clone.variableCostsOfHarvestingOfFreshFodder = this.variableCostsOfHarvestingOfFreshFodder;
			clone.variableCostsOfHarvestingOfHay = this.variableCostsOfHarvestingOfHay;
			clone.variableCostsOfHarvestingOfPastureForGrazing = this.variableCostsOfHarvestingOfPastureForGrazing;
			clone.variableCostsOfHarvestingOfSilage = this.variableCostsOfHarvestingOfSilage;
			return clone;
		}
	}
	
	
}
