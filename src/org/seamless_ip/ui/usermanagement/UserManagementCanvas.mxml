<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: UserManagementCanvas.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->

<mx:VBox width="100%" height="100%" xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:ns1="org.seamless_ip.ui.usermanagement.*"
         creationComplete="creationCompleteHandler(event)" creationPolicy="all" xmlns:ns2="org.seamless_ip.ui.common.*">

    <mx:Script>
		<![CDATA[
        import org.seamless_ip.services.transferobjects.seamproj.ApplicationRole;
        import org.seamless_ip.services.transferobjects.seamproj.ProjectRole;
        import org.seamless_ip.services.transferobjects.seamproj.User;

        private var _activeUser:User;

        public static const CLOSE:String = "Close";

        private function creationCompleteHandler(event:Event):void {
            var userList:UserList;
            var userDefinition:UserDefinition;
            var projectRoleList:ProjectRoleList;
            var projectRoleDefinition:ProjectRoleDefinition;
            var projectRoleListMediator:ProjectRoleListMediator;
            var userListMediator:UserListMediator;
            var userDefinitionMediator:UserDefinitionMediator;
            var projectRoleDefinitionMediator:ProjectRoleDefinitionMediator;
            var userManagementCanvasMediator:UserManagementCanvasMediator;

            userList = new UserList();
            userListMediator = UserListMediator.create(userList);
            userDefinition = new UserDefinition();
            userDefinitionMediator = UserDefinitionMediator.create(userDefinition);
            userDefinitionMediator.activeUser = activeUser;
            projectRoleList = new ProjectRoleList();
            projectRoleListMediator = ProjectRoleListMediator.create(projectRoleList);
            projectRoleDefinition = new ProjectRoleDefinition();
            projectRoleDefinitionMediator = ProjectRoleDefinitionMediator.create(projectRoleDefinition);
            projectRoleDefinitionMediator.activeUser = activeUser;

            userManagementCanvasMediator = UserManagementCanvasMediator.create(this);
            userManagementCanvasMediator.registerEvents();

            projectRoleListMediator.registerEventHandlers();
            projectRoleDefinitionMediator.registerEventHandlers();
            userListMediator.registerEventHandlers();
            userDefinitionMediator.registerEventHandlers();
            addChild(userList);
            addChild(userDefinition);
            addChild(projectRoleList);
            addChild(projectRoleDefinition);

            userList.addEventListener(UserList.CLOSE, closeHandler);

            userDefinition.hide();
            projectRoleList.hide();
            projectRoleDefinition.hide();


            new ApplicationRole();
            new ProjectRole();


        }

        private function closeHandler(event:Event = null):void {
            dispatchEvent(new Event(CLOSE));
        }

        public function get activeUser():User {
            return _activeUser;
        }

        public function set activeUser(user:User):void {
            var projectRoleDefintionMediator:ProjectRoleDefinitionMediator;

            projectRoleDefintionMediator = ProjectRoleDefinitionMediator.getInstance();
            _activeUser = user;

        }
			
		]]>
	</mx:Script>
</mx:VBox>
