<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: ProjectRoleDefinition.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         width="100%"
         height="100%"
         paddingLeft="10"
         paddingRight="10"
         paddingTop="10"
         paddingBottom="10"
         creationComplete="creationCompleteHandler(event)">

    <!--
        View for editing a project role.

        @author Michiel Rop
    -->
    <mx:Script>
		<![CDATA[
        import mx.collections.ArrayCollection;

        import org.seamless_ip.services.transferobjects.seamproj.Project;
        import org.seamless_ip.services.transferobjects.seamproj.ProjectRole;

        public static const SAVE:String = "Save";
        public static const DISCARD:String = "Discard";
        public static const SHOW:String = "Show";
        public static const HIDE:String = "Hide";


        private var _editMode:Boolean;

        private var _selectedProjectRole:ProjectRole;

        private var unupdatedSelectedProjectRole:ProjectRole;

        public function set selectedProjectRole(projectRole:ProjectRole):void {
            var selectedProject:Project;
            _selectedProjectRole = projectRole;
            unupdatedSelectedProjectRole = projectRole.Clone() as ProjectRole;
            selectedProject = projectRole.project;
            for each (var project:Object in projects) {
                if (project.title == selectedProject.title) {
                    projectComboBox.selectedItem = project;
                }
            }
            for each (var permissionGroup:Object in permissionGroups) {
                if (projectRole.title == permissionGroup.label) {
                    permissionGroupComboBox.selectedItem = permissionGroup;
                }
            }


        }

        public function get selectedProjectRole():ProjectRole {
            return _selectedProjectRole;
        }

        [Bindable]
        public var projects:ArrayCollection = new ArrayCollection();

        [Bindable]
        public var permissionGroups:ArrayCollection = new ArrayCollection();

        private var chooseAProject:Object;
        private var chooseAPermissionGroup:Object;
        private var administratorPermissionGroup:Object;

        public function set editMode(mode:Boolean):void
        {
            _editMode = mode;
            if (!_editMode) {
                projects.addItem(chooseAProject);
                permissionGroups.addItem(chooseAPermissionGroup);
                permissionGroupComboBox.selectedItem = chooseAPermissionGroup;
                projectComboBox.selectedItem = chooseAProject;
                saveButton.enabled = false;
                selectedProjectRole = new ProjectRole();
            }
            else {

            }
        }

        public function get editMode():Boolean {
            return _editMode;
        }

        public function show():void {
            includeInLayout = true;
            visible = true;
            dispatchEvent(new Event(SHOW));
        }

        public function hide():void {
            visible = false;
            includeInLayout = false;
            dispatchEvent(new Event(HIDE));
        }


        private function discardHandler(event:Event):void {
            selectedProjectRole = unupdatedSelectedProjectRole;
            dispatchEvent(new Event(DISCARD));
        }

        private function saveHandler(event:Event):void {
            dispatchEvent(new Event(SAVE));
        }

        private function creationCompleteHandler(event:Event):void {
            chooseAProject = chooseAProjectObject;
            chooseAPermissionGroup = chooseAPermissionGroupObject;
            administratorPermissionGroup = administratorPermissionGroup;
        }

        private function permissionGroupChangeHandler(event:Event):void
        {
            var selectedItem:Object;
            var chooseAPermissionGroupIndex:int;

            selectedItem = permissionGroupComboBox.selectedItem;
            chooseAPermissionGroupIndex = permissionGroups.getItemIndex(chooseAPermissionGroup);
            if (chooseAPermissionGroupIndex != -1) {
                permissionGroups.removeItemAt(chooseAPermissionGroupIndex);
            }
            dispatchEvent(new Event("comboBoxChanged"));
            if (selectedItem == chooseAPermissionGroup) return;


            _selectedProjectRole.title = selectedItem.label;
        }

        private function projectChangeHandler(event:Event):void
        {
            var selectedItem:Object;
            var chooseAProjectIndex:int;
            selectedItem = projectComboBox.selectedItem;
            chooseAProjectIndex = projects.getItemIndex(chooseAProject);
            if (chooseAProjectIndex != -1) {
                projects.removeItemAt(chooseAProjectIndex);
            }


            dispatchEvent(new Event("comboBoxChanged"));
            if (selectedItem == chooseAProject) return;

            _selectedProjectRole.project = selectedItem as Project;
        }

        private function get chooseAProjectObject():Object {
            var object:Object;
            object = new Object();
            object.title = "Choose a project";
            return object;
        }


        private function get chooseAPermissionGroupObject():Object {
            var object:Object;
            object = new Object;
            object.label = "Choose a permissiongroup";
            return object;
        }

        [Bindable(event="comboBoxChanged")]
        private function realOptions():Boolean {
            var selectedItem:Object;

            selectedItem = permissionGroupComboBox.selectedItem;
            if (selectedItem == chooseAPermissionGroup) return false;


            selectedItem = projectComboBox.selectedItem;
            if (selectedItem == chooseAProject) return false;


            return true;


        }
			
		]]>
	</mx:Script>
    <mx:Form width="100%" height="100%">
        <mx:FormHeading label="Projectrole Details"/>
        <mx:FormItem width="100%" label="role:">
            <mx:ComboBox width="100%" id="permissionGroupComboBox"
                         dataProvider="{permissionGroups}"
                         labelField="label" change="permissionGroupChangeHandler(event)"/>
        </mx:FormItem>
        <mx:FormItem width="100%" label="project:">
            <mx:ComboBox width="100%" id="projectComboBox" dataProvider="{projects}" labelField="title"
                         change="projectChangeHandler(event)"/>
        </mx:FormItem>
    </mx:Form>
    <mx:HBox width="100%">
        <mx:Button label="Ok"
                   id="saveButton"
                   width="120"
                   click="saveHandler(event)"
                   toolTip="Save all changes"
                   enabled="{realOptions()}"
                   disabledIcon="@Embed('/img/icons/save_edit_d.gif')"
                   icon="@Embed('/img/icons/save_edit.gif')"/>
        <mx:Button label="Cancel"
                   width="120"
                   click="discardHandler(event)"
                   toolTip="Discard all changes"
                   disabledIcon="@Embed('/img/icons/delete_edit_d.gif')"
                   icon="@Embed('/img/icons/delete_edit.gif')"
                   enabled="true"/>
    </mx:HBox>


</mx:VBox>
