<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: ProjectDefinition.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           width="100%" height="100%"
           creationComplete="init()"
        >

    <!--
    Shows the general project information and allows the user to modify it.
    -->
    <mx:Script>
		<![CDATA[
        import mx.binding.utils.ChangeWatcher;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Application;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.seamless_ip.services.transferobjects.seamproj.ModelChain;
        import org.seamless_ip.services.transferobjects.seamproj.Project;
        import org.seamless_ip.services.transferobjects.seamproj.SpatialScale;
        import org.seamless_ip.services.transferobjects.seamproj.User;
        import org.seamless_ip.ui.enums.EnumClassName;
        import org.seamless_ip.ui.enums.EnumManager;

        [Bindable]
        private var _project:Project;
        [Bindable]
        private var _modified:Boolean;
        [Bindable]
        private var _editable:Boolean = false;

        [Bindable]
        private var _spatialScales:ArrayCollection; // SpatialScale
        [Bindable]
        private var _modelChains:ArrayCollection; // ModelChain

        private var _previousSelectedModelChain:ModelChain;

        private const MODEL_CHAIN_SELECTION_PENDING:String =
                "Checking project if selection is still possible...";
        private const MODEL_CHAIN_SELECTION_ENABLED:String =
                "Choose either spatial scale or model chain for the analysis:";
        private const MODEL_CHAIN_SELECTION_DISABLED:String =
                "This project contains experiments that use the follow settings for analysis:";


        /**
         * Initialises the component (call when creation is complete).
         */
        private function init():void {
            // get the enumerations for the comboboxes
            _spatialScales = EnumManager.instance.getEnumValues(EnumClassName.SPATIAL_SCALE);
            _modelChains = EnumManager.instance.getEnumValues(EnumClassName.MODELCHAIN);

            restoreValues();

            if (ChangeWatcher.canWatch(Application.application, "activeUser"))
                ChangeWatcher.watch(Application.application, "activeUser", updateUser);

            updateUser(new Event("propertyChange"));
            update();
        }


        /**
         * Update the component, called when it is made visible.
         **/
        private function update():void {
            if ((_project != null) && (_project.problem != null) && (_project.problem.spatialScale != null)) {
                if (comboBoxModelChain.selectedItem != null)
                    _previousSelectedModelChain = ModelChain(comboBoxModelChain.selectedItem);

                // disable scale selection until we know if it is allowed or not
                labelModelChainSelection.text = MODEL_CHAIN_SELECTION_PENDING;
                comboBoxSpatialScale.enabled = false;
                comboBoxModelChain.enabled = false;

                projectService.getNumberOfExperimentsForProject(_project.id);
                updateSpatialScaleComboBox(_project.problem.spatialScale);
            }
            updateEditable();
        }


        /**
         * Updates the spatial scale combobox to display the specified
         * spatial scale.
         */
        private function updateSpatialScaleComboBox(spatialScaleToSelect:SpatialScale):void {
            if (spatialScaleToSelect != null) {
                for each (var s:SpatialScale in _spatialScales) {
                    if (s.id == spatialScaleToSelect.id) {
                        comboBoxSpatialScale.selectedItem = s;
                        spatialScaleSelected();
                        break;
                    }
                }
            }
        }


        /**
         * Gets the current active user from the Application.
         */
        private function getUser():User {
            return Application.application.activeUser;
        }


        /**
         * Updates the component for a change in active user.
         */
        private function updateUser(event:Event):void {
            updateEditable();
        }


        /**
         * Updates the editable state of the component based on the
         * active user.
         */
        private function updateEditable():void {
            if ((getUser() != null) && (_project != null)) {
                _editable = getUser().canDoForProject(_project.id, "UPDATE", "PROJECT");
            }
            else {
                _editable = false;
            }
        }


        /**
         * Sets the current active project.
         */
        public function set project(project:Project):void {
            _project = project;
            update();
            _modified = false;
        }


        /**
         * Handler for component content changes.
         */
        private function changed():void {
            _modified = true;
            progressLabel.text = "";
        }


        /**
         * Updates the selected model chain according to a change in the
         * selected spatial scale.
         */
        private function spatialScaleSelected():void {
            var found:Boolean = false;
            errorLabel.text = "";
            if (comboBoxSpatialScale.selectedItem != null) {
                // update the model chain combo box
                for each (var item:ModelChain in _modelChains) {
                    if (item.spatialScale.id == comboBoxSpatialScale.selectedItem.id) {
                        comboBoxModelChain.selectedItem = item;
                        found = true;
                        break;
                    }
                }

                if (!found)
                    errorLabel.text = "No model chain available to calculate at the selected spatial scale!";

                changed();
            }
        }


        /**
         * Updates the selected spatial scale according to a change in the
         * selected model chain.
         */
        private function modelChainSelected():void {
            var found:Boolean = false;
            errorLabel.text = "";

            if (comboBoxModelChain.selectedItem != null) {
                // update the spatial scale combo box
                for each (var item:SpatialScale in _spatialScales) {
                    if (item.id == comboBoxModelChain.selectedItem.spatialScale.id) {
                        comboBoxSpatialScale.selectedItem = item;
                        found = true;
                        break;
                    }
                }

                if (!found)
                    errorLabel.text = "Spatial scale not clear for selected model chain (internal problem)!";

                changed();
            }
        }


        /**
         * Generic handling of a server fault when using remote objects.
         */
        private function serverFaultHandler(event:FaultEvent):void {
            Alert.show(event.fault.message, "Server Error");
        }


        /**
         * Handles the result from the remote method call that returns the
         * number of experiments for a project. When a project has one or
         * more experiments changing of the model chain / spatial scale is
         * no longer allowed.
         */
        private function getNumberOfExperimentsForProjectHandler(event:ResultEvent):void {
            var nrExperiments:Number = event.result as Number;
            comboBoxModelChain.enabled = (_editable && nrExperiments == 0);
            comboBoxSpatialScale.enabled = (_editable && nrExperiments == 0);

            if (nrExperiments == 0) {
                labelModelChainSelection.text = MODEL_CHAIN_SELECTION_ENABLED;
            }
            else {
                labelModelChainSelection.text = MODEL_CHAIN_SELECTION_DISABLED;
            }
        }


        /**
         * Retrieves the current values for the project from the component
         * and persists them on the server.
         */
        private function saveValues():void {
            //General
            _project.title = inputProjectTitle.text;
            _project.description = inputProjectDescription.text;

            //Problem specification
            if (inputProblemDescription != null) {
                _project.problem.description = inputProblemDescription.text;
            }

            if ((comboBoxSpatialScale != null) && (comboBoxSpatialScale.selectedItem != null)) {
                _project.problem.spatialScale = SpatialScale(comboBoxSpatialScale.selectedItem);
            }

            if (comboBoxModelChain.selectedItem != null)
                _previousSelectedModelChain = ModelChain(comboBoxModelChain.selectedItem);

            // TODO: keep copy of original project data and pass as argument for staleness checking
            if (getUser() != null) {
                projectService.update(getUser().id, _project, null);
                _editable = false;
            }
        }

        /**
         * Handles the result from the project update remote method call.
         */
        private function updateProjectHandler(event:ResultEvent):void {
            _modified = false;
            updateUser(new Event("propertyChange"));
        }


        /**
         * Restores values of the component with the values from the
         * project, undoing all changes made.
         */
        private function restoreValues():void {
            inputProjectTitle.text = _project.title;
            inputProjectDescription.text = _project.description;

            if (inputProblemDescription != null) {
                inputProblemDescription.text = _project.problem.description;
            }

            comboBoxSpatialScale.selectedItem = _previousSelectedModelChain;
            updateSpatialScaleComboBox(_project.problem.spatialScale);

            _modified = false;
        }
		]]>
	</mx:Script>

    <!--
     ===========================================================================
         Server Access
     ===========================================================================
     -->

    <mx:RemoteObject id="projectService"
                     destination="projectService"
            >
        <mx:method name="getNumberOfExperimentsForProject"
                   fault="serverFaultHandler(event)"
                   result="getNumberOfExperimentsForProjectHandler(event)"
                />
        <!-- ProjectTO update(Long userId, ProjectTO newItem, ProjectTO oldItem) -->
        <mx:method name="update"
                   fault="serverFaultHandler(event)"
                   result="updateProjectHandler(event)"
                />
    </mx:RemoteObject>

    <!--
     ===========================================================================
         Formatters
     ===========================================================================
     -->

    <mx:DateFormatter id="dateFormatter"
                      formatString="DD/MM/YYYY"/>

    <!--
     ===========================================================================
         Components
     ===========================================================================
     -->

    <mx:VBox
            width="100%"
            height="100%"
            paddingTop="0"
            paddingBottom="2"
            >

        <mx:ViewStack id="viewStackProjectDefinition"
                      width="100%"
                      height="100%"
                >

            <mx:Canvas id="tabPageGeneral" label="General" width="100%" height="100%">
                <mx:Form width="100%" height="100%" borderStyle="none" cornerRadius="0">
                    <mx:FormHeading label="Project"
                            />

                    <mx:FormItem width="100%">
                        <mx:Label width="100%" truncateToFit="true"
                                  text="Provide some short information to identify the project:"
                                  enabled="false"
                                />
                    </mx:FormItem>

                    <mx:FormItem label="Title:" width="100%" required="true">
                        <mx:TextInput id="inputProjectTitle" width="80%"
                                      editable="{_editable}"
                                      text="{_project.title}"
                                      change="changed()"
                                />
                    </mx:FormItem>

                    <mx:FormItem label="Description:" width="100%" required="true" height="30%">
                        <mx:TextArea id="inputProjectDescription" width="80%"
                                     editable="{_editable}"
                                     text="{_project.description}"
                                     change="changed()"
                                     height="100%"
                                />
                    </mx:FormItem>

                    <mx:FormHeading label="Problem"/>

                    <mx:FormItem width="100%">
                        <mx:Label width="100%" truncateToFit="true"
                                  text="Describe in some detail the problem investigated in this project:"
                                  enabled="false"
                                />
                    </mx:FormItem>

                    <mx:FormItem label="Narrative:" width="100%" height="100%" required="false">
                        <mx:TextArea id="inputProblemDescription" width="80%" height="100%"
                                     editable="{_editable}"
                                     text="{_project.problem.description}"
                                     change="changed()"
                                />
                    </mx:FormItem>

                    <mx:FormHeading label="Settings"/>

                    <mx:FormItem width="100%">
                        <mx:Label id="labelModelChainSelection"
                                  width="100%" truncateToFit="true"
                                  text="Choose either spatial scale or model chain for the analysis:"
                                  enabled="false"
                                />
                    </mx:FormItem>

                    <mx:FormItem label="Spatial Scale:" width="100%">
                        <mx:HBox width="100%" backgroundAlpha="0.0" alpha="0.5">
                            <mx:ComboBox id="comboBoxSpatialScale" width="80%"
                                         dataProvider="{_spatialScales}"
                                         labelField="label"
                                         change="spatialScaleSelected()"
                                         enabled="false"
                                         editable="false"
                                         toolTip="Spatial scale of the analysis. The finest unit of analysis is displayed in square brackets. Choice of scale determines appropriate model chain."
                                    />
                        </mx:HBox>
                    </mx:FormItem>

                    <mx:FormItem label="Model Chain:" width="100%">
                        <mx:HBox width="100%" backgroundAlpha="0.0" alpha="0.5">
                            <mx:ComboBox id="comboBoxModelChain" width="80%"
                                         dataProvider="{_modelChains}"
                                         change="modelChainSelected()"
                                         enabled="false"
                                         editable="false"
                                         toolTip="Model chain used in the analysis. The choice of model chain determines the spatial scale of the analysis (with finest unit of analysis in square brackets)."
                                    />
                        </mx:HBox>
                    </mx:FormItem>

                    <mx:FormItem width="100%">
                        <mx:Label id="errorLabel" width="100%" textAlign="left" color="#ff0000"/>
                    </mx:FormItem>

                </mx:Form>
            </mx:Canvas>
        </mx:ViewStack>

        <mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle" horizontalGap="4">
            <mx:Label width="500" color="#808080" id="progressLabel"
                      truncateToFit="true"
                    />
            <mx:Spacer width="100%"/>
            <mx:LinkButton label="Save"
                           visible="{_editable}"
                           enabled="{_modified}"
                           toolTip="Save all changes"
                           click="saveValues()"
                           icon="@Embed('/img/icons/seamless-save.gif')"
                           disabledIcon="@Embed('/img/icons/seamless-save-greyed.gif')"
                    />
            <mx:LinkButton label="Discard"
                           visible="{_editable}"
                           enabled="{_modified}"
                           toolTip="Discard all changes"
                           click="restoreValues()"
                           icon="@Embed('/img/icons/seamless-undo.gif')"
                           disabledIcon="@Embed('/img/icons/seamless-undo-greyed.gif')"
                    />
        </mx:HBox>

    </mx:VBox>

</mx:Canvas>
