<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: IndicatorFrameworkCell.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->
<mx:VBox
        xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:if="org.seamless_ip.ui.indicators.*"
        width="242" height="196"
        verticalGap="0"
        borderStyle="solid"
        cornerRadius="5"
        backgroundColor="{getBackgroundColor(_indicators.length)}"
        backgroundAlpha="0.1"
        >

    <mx:Metadata>
        [Event(name="change")]
    </mx:Metadata>

    <!--
    Represents a single cell in the indicator framework grid (e.g. GOF). Each
    cell contains the selected indicators for a specific subtheme.
    -->
    <mx:Script>
		<![CDATA[
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.core.Application;
        import mx.core.IFlexDisplayObject;
        import mx.managers.PopUpManager;

        import org.seamless_ip.services.transferobjects.indi.EndorsedIndicator;
        import org.seamless_ip.services.transferobjects.indi.IIndicator;
        import org.seamless_ip.services.transferobjects.indi.Subtheme;

        [Bindable]
        public var indicatorLibrary:IndicatorLibrary;
        [Bindable]
        public var editable:Boolean = false;

        [Bindable]
        private var _indicators:ArrayCollection = new ArrayCollection(); // of IIndicator
        [Bindable]
        private var _models:ArrayCollection; // of Model
        [Bindable]
        private var _spatialExtentName:String;
        [Bindable]
        private var _spatialResolutionName:String;
        [Bindable]
        private var _domainName:String;
        [Bindable]
        private var _dimensionName:String;
        [Bindable]
        private var _genericThemeName:String;


        /**
         * Initialises the framework cell based on the specified settings.
         */
        public function init(
                models:ArrayCollection,
                spatialExtentName:String,
                spatialResolutionName:String,
                domainName:String,
                dimensionName:String,
                genericThemeName:String
                ):void
        {
            if (models != null)
                _models = models;
            else
                _models = new ArrayCollection();

            _domainName = domainName;
            _dimensionName = dimensionName;
            _genericThemeName = genericThemeName;
            _spatialExtentName = spatialExtentName;
            _spatialResolutionName = spatialResolutionName;

            // update count of available indicators
            var selection:ArrayCollection = indicatorLibrary.findByModelsAndScaleAndCategory(
                    _models,
                    _spatialExtentName,
                    _spatialResolutionName,
                    _domainName,
                    _dimensionName,
                    _genericThemeName,
                    "",
                    true
                    );

            initListFromSelection(selection);

            // put the theme name into the header label
            labelTheme.text = "";
            if (selection.length > 0)
            {
                if (EndorsedIndicator(selection[0]).groupSubthemes != null)
                {
                    var subtheme:Subtheme = Subtheme(EndorsedIndicator(selection[0]).groupSubthemes.getItemAt(0));
                    labelTheme.text = subtheme.theme.label_en;
                }
            }

            // put in the number of available indicators
            labelAvailable.text = "/" + selection.length;
        }


        /**
         * Gets the colour to be set for the background of the cell.
         */
        private function getBackgroundColor(length:int):uint {
            return 0xDCDCD0;
        }


        /**
         * Initialises the list of indicators in the cell (the already
         * selected indicators) from the given selection.
         *
         * @param selection ArrayCollection of IndicatorModel instances
         */
        public function initListFromSelection(selection:ArrayCollection = null):void {
            _indicators.removeAll();

            if (selection != null) {
                for each (var indi:EndorsedIndicator in selection) {
                    if (indicatorLibrary.matches(indi, _spatialExtentName, _spatialResolutionName, _domainName, _dimensionName, _genericThemeName, "")) {
                        if (indi.getSelected())
                            _indicators.addItem(indi);
                    }
                }
            }
            // sort the list of indicators
            var sort:Sort = new Sort();
            sort.compareFunction = compareIndicators;
            _indicators.sort = sort;
            _indicators.refresh();
        }


        private function compareIndicators(a:Object, b:Object, fields:Array = null):int {
            if ((a is IIndicator) && (b is IIndicator)) {
                var indi1:IIndicator = IIndicator(a);
                var indi2:IIndicator = IIndicator(b);

                // Primary sort: implemented indicators go first
                if (indi1.isImplemented() && !indi2.isImplemented())
                    return -1;
                if (indi2.isImplemented() && !indi1.isImplemented())
                    return 1;
                // Secondary sort: alphabetic on indicator title
                if (indi1.getLabel_en() < indi2.getLabel_en())
                    return -1;
                if (indi2.getLabel_en() < indi1.getLabel_en())
                    return 1;
                return 0
            }
            else
                return 0;
        }


        /**
         * Positions the specified dialog relative to the main application
         * window.
         */
        private function positionPopUp(dialog:IFlexDisplayObject):void {
            dialog.x = (Application.application.width - dialog.width) / 2;
            dialog.y = (Application.application.height - dialog.height) / 3;
        }


        /**
         * Displays the properties dialog for the selected indicator.
         */
        private function showProperties():void {
            if (listIndicators.selectedItem != null) {
                var dialog:IFlexDisplayObject = PopUpManager.createPopUp(this, IndicatorPropertiesDlg, true);
                IndicatorPropertiesDlg(dialog).indicator = IIndicator(listIndicators.selectedItem);
                positionPopUp(dialog);
            }
        }


        /**
         * Displays a dialog that allows the user to selection one or more
         * indicators to be added to the cell.
         */
        private function addIndicators():void {
            // create a list of not already selected indicators
            var available:ArrayCollection = indicatorLibrary.findByModelsAndScaleAndCategory(
                    _models,
                    _spatialExtentName,
                    _spatialResolutionName,
                    _domainName,
                    _dimensionName,
                    _genericThemeName,
                    "",
                    false
                    );

            // create the dialog
            var dialog:IFlexDisplayObject = PopUpManager.createPopUp(this, IndicatorSelectionDlg, true);
            IndicatorSelectionDlg(dialog).selectedIndicators = _indicators;
            IndicatorSelectionDlg(dialog).availableIndicators = available;
            IndicatorSelectionDlg(dialog).addEventListener("change", selectionChangedHandler);
            positionPopUp(dialog);
        }


        /**
         * Change handler.
         */
        private function selectionChangedHandler(event:Event):void {
            dispatchEvent(new Event('change'));
        }


        /**
         * Removes the selected indicator from the cell.
         */
        private function removeIndicator():void {
            if (listIndicators.selectedItem != null) {
                var index:int = _indicators.getItemIndex(listIndicators.selectedItem);
                EndorsedIndicator(listIndicators.selectedItem).setSelected(false);
                _indicators.removeItemAt(index);
                dispatchEvent(new Event('change'));
            }
        }
	        
		]]>
	</mx:Script>

    <!--
     ===========================================================================
         Components
     ===========================================================================
     -->

    <mx:VBox width="100%" horizontalAlign="center">
        <mx:Label id="labelTheme"
                  maxWidth="200"
                  truncateToFit="true"
                  textAlign="center"
                />
    </mx:VBox>

    <mx:List id="listIndicators"
             width="100%"
             height="100%"
             alpha="1.0"
             dataProvider="{_indicators}"
             itemRenderer="org.seamless_ip.ui.indicators.IndicatorRenderer"
             paddingBottom="2"
             paddingLeft="2"
             paddingRight="2"
             paddingTop="2"
             borderStyle="solid"
             doubleClick="showProperties()"
             doubleClickEnabled="true"
            />

    <mx:ControlBar
            width="100%"
            paddingBottom="1"
            paddingLeft="5"
            paddingRight="5"
            paddingTop="1"
            backgroundAlpha="0.1"
            cornerRadius="5"
            backgroundColor="#aa7903"
            horizontalGap="2"
            >

        <mx:Button id="buttonAddIndicator"
                   visible="{editable}"
                   styleName="flattenedButton"
                   width="16"
                   height="16"
                   click="addIndicators()"
                   toolTip="Add Indicator"
                   enabled="true"
                   icon="@Embed(source='/img/icons/seamless-add-up.gif')"
                   overIcon="@Embed(source='/img/icons/seamless-add-up-selected.gif')"
                   disabledIcon="@Embed(source='/img/icons/seamless-add-disabled.gif')"
                   alpha="0.7"
                   mouseOver="buttonAddIndicator.alpha=1.0"
                   mouseOut="buttonAddIndicator.alpha=0.7"
                />

        <mx:Button id="buttonRemoveIndicator"
                   visible="{editable}"
                   styleName="flattenedButton"
                   width="16"
                   height="16"
                   click="removeIndicator()"
                   toolTip="Remove selected indicator"
                   enabled="{listIndicators.selectedIndex >= 0}"
                   icon="@Embed('/img/icons/seamless-delete-up.gif')"
                   overIcon="@Embed(source='/img/icons/seamless-delete-up-selected.gif')"
                   disabledIcon="@Embed(source='/img/icons/seamless-delete-disabled.gif')"
                   alpha="0.7"
                   mouseOver="buttonRemoveIndicator.alpha=1.0"
                   mouseOut="buttonRemoveIndicator.alpha=0.7"
                />

        <mx:HBox width="100%" horizontalAlign="center" horizontalGap="0">
            <mx:Label text="{_indicators.length}" textAlign="right"/>
            <mx:Label id="labelAvailable"/>
        </mx:HBox>

        <mx:Button id="buttonShowProperties"
                   styleName="flattenedButton"
                   width="16"
                   height="16"
                   click="showProperties()"
                   toolTip="Show properties of selected indicator"
                   enabled="{listIndicators.selectedIndex >= 0}"
                   icon="@Embed('/img/icons/seamless-info-up.gif')"
                   overIcon="@Embed(source='/img/icons/seamless-info-up-selected.gif')"
                   disabledIcon="@Embed(source='/img/icons/seamless-info-disabled.gif')"
                   alpha="0.7"
                   mouseOver="buttonShowProperties.alpha=1.0"
                   mouseOut="buttonShowProperties.alpha=0.7"
                />

    </mx:ControlBar>

</mx:VBox> 
