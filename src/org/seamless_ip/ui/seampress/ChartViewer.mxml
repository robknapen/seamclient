<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: ChartViewer.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">

    <!--
        Seam:PRESS component to visualise data in a chart.

        @author Rob Knapen
    -->
    <mx:Script>
		<![CDATA[
        import mx.charts.CategoryAxis;
        import mx.charts.HitData;
        import mx.charts.series.ColumnSeries;
        import mx.collections.ArrayCollection;

        [Bindable]
        public var experiments:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var visualisation:Visualisation;
        private var hashCodeInfo:Dictionary = null;
        private var values:IndicatorValues;

        public function update(visualisation:Visualisation, values:IndicatorValues):void {
            this.visualisation = visualisation;
            this.values = values;

            var indTitles:ArrayCollection = values.getTitles(IndicatorValues.INDICATOR_TITLE, visualisation.indicatorIds);
            comboBoxIndicators.dataProvider = indTitles; // object:{id, label}

            var valueTypes:ArrayCollection = ValueType.values;
            comboBoxValueTypes.dataProvider = valueTypes;

            refresh();
        }

        private function refresh():void {
            if ((visualisation != null) && (values != null)) {

                var indicatorId:String = String(comboBoxIndicators.selectedItem.id);

                var data:ArrayCollection = values.createDataProvider(
                        visualisation.experimentIds,
                        indicatorId,
                        ValueType(comboBoxValueTypes.selectedItem),
                        true,
                        true
                        );

                // create some info
                hashCodeInfo = values.createHashCodeInfo(visualisation.experimentIds, visualisation.indicatorIds);

                // add the horizontal axis
                var axis:CategoryAxis = new CategoryAxis();
                axis.categoryField = "hashCode";
                axis.labelFunction = createHashCodeLabel;
                valuesChart.horizontalAxis = axis;

                // add series to chart
                var series:Array = valuesChart.series;
                series.length = 0;
                var cs:ColumnSeries;

                if (checkBoxShowBaseline.selected) {
                    var baselineId:String = visualisation.baselineExperimentId;
                    cs = new ColumnSeries();
                    cs.dataProvider = data;
                    cs.xField = "hashCode";
                    cs.yField = values.retrieveTitle(IndicatorValues.EXPERIMENT_TITLE, baselineId);
                    cs.displayName = cs.yField;
                    series.push(cs);
                }

                for each (var id:String in visualisation.experimentIds)
                {
                    cs = new ColumnSeries();
                    cs.dataProvider = data;
                    cs.xField = "hashCode";
                    cs.yField = values.retrieveTitle(IndicatorValues.EXPERIMENT_TITLE, id);
                    cs.displayName = cs.yField;
                    series.push(cs);
                }

                valuesChart.series = series;
                valuesChart.dataProvider = data;
            }
        }


        private function createHashCodeLabel(categoryValue:Object, previousCategoryValue:Object, axis:CategoryAxis, categoryItem:Object):String
        {
            if ((hashCodeInfo != null) && (categoryValue != null))
            {
                if (hashCodeInfo[categoryValue] != null)
                    return hashCodeInfo[categoryValue].label;
                else
                    return categoryValue.toString();
            }
            return "?";
        }


        private function createHashCodeDataTip(hd:HitData):String
        {
            var result:String = "";
            var yField:String = "";

            // use element data to only display correct experiment value
            if (hd.element is ColumnSeries)
                yField = ColumnSeries(hd.element).yField;

            if (hd.item != null)
            {
                for (var key:String in hd.item)
                {
                    if ((key != "hashCode") && ((key.indexOf("Exp") < 0) || (key == yField)))
                    {
                        if (result.length > 0)
                            result += "\n";
                        result += key + ": " + hd.item[key];
                    }
                }
            }
            return result;
        }
		]]>
	</mx:Script>

    <!--
     ===========================================================================
         Components
     ===========================================================================
     -->

    <mx:VBox width="100%"
             horizontalAlign="center" verticalAlign="middle"
             borderStyle="solid" cornerRadius="10"
             horizontalGap="4"
             paddingLeft="10" paddingRight="10"
             paddingTop="5" paddingBottom="5"
             backgroundAlpha="0.5" backgroundColor="#FCFBD9">
        <mx:HBox width="100%" verticalAlign="middle">
            <mx:Label text="Indicator:" width="100" textAlign="right" fontWeight="bold"/>
            <mx:ComboBox id="comboBoxIndicators"
                         change="refresh()"
                         width="100%"
                    />
            <mx:ComboBox id="comboBoxValueTypes"
                         change="refresh()"
                    />
        </mx:HBox>
        <mx:HBox width="100%" verticalAlign="middle">
            <mx:Label text="Options:" width="100" textAlign="right" fontWeight="bold"/>
            <mx:CheckBox id="checkBoxShowBaseline"
                         label="Show baseline values"
                         selected="false"
                         enabled="{visualisation.baselineExperimentId != null}"
                         change="refresh()"/>
            <mx:Spacer width="100%"/>
        </mx:HBox>
    </mx:VBox>

    <mx:HBox width="100%" height="100%"
             horizontalAlign="center" verticalAlign="middle"
             borderStyle="solid" cornerRadius="10"
             horizontalGap="4"
             paddingLeft="10" paddingRight="10"
             paddingTop="5" paddingBottom="5"
             backgroundAlpha="0.5" backgroundColor="#FCFBD9">

        <mx:ColumnChart id="valuesChart"
                        width="100%" height="100%"
                        dataTipMode="single"
                        dataTipFunction="createHashCodeDataTip"
                        showDataTips="true"
                />
    </mx:HBox>

    <mx:HBox width="100%"
             horizontalAlign="center" verticalAlign="middle"
             borderStyle="solid" cornerRadius="10"
             horizontalGap="4"
             paddingLeft="10" paddingRight="10"
             paddingTop="5" paddingBottom="5"
             backgroundAlpha="0.5" backgroundColor="#FCFBD9">

        <mx:Legend id="valuesLegend"
                   direction="horizontal"
                   dataProvider="{valuesChart}"
                />
    </mx:HBox>

</mx:VBox>
