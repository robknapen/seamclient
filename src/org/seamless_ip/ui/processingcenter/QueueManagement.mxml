<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: QueueManagement.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         width="100%" height="100%"
        >

    <!--
    Overall view of the calculation queue for experiments.
    -->
    <mx:Script>
		<![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.seamless_ip.services.transferobjects.seamproj.Project;

        [Bindable]
        private var _project:Project;
        [Bindable]
        private var _queuedExperiments:ArrayCollection;
        [Bindable]
        private var _refreshInProgress:Boolean = false;


        public function set project(project:Project):void {
            if ((project != _project)) {
                _project = project;
                refresh();
            }
        }


        private function refresh(event:ResultEvent = null):void {
            if (_project != null) {
                experimentQueueService.info();
                _refreshInProgress = true;
            }
        }


        private function serverFaultHandler(event:FaultEvent):void {
            Alert.show("An error was reported by the server: " + event.fault.faultString, "Server error");
            _refreshInProgress = false;
        }


        private function infoHandler(event:ResultEvent):void {
            _queuedExperiments = event.result as ArrayCollection;
            _refreshInProgress = false;
        }


        private function removeFromQueue(data:Object):void {
            if ((data != null) && data.hasOwnProperty("id")) {
                experimentQueueService.remove(data.id);
            }
        }
		]]>
	</mx:Script>

    <mx:RemoteObject id="experimentQueueService"
                     destination="experimentQueueService">
        <mx:method name="remove"
                   result="refresh(event)"
                   fault="serverFaultHandler(event)"/>
        <mx:method name="info"
                   result="infoHandler(event)"
                   fault="serverFaultHandler(event)"/>
    </mx:RemoteObject>

    <mx:Label text="Queue of experiments waiting for processing (click Refresh to update):" enabled="false"/>

    <mx:DataGrid id="expGrid"
                 dataProvider="{_queuedExperiments}"
                 width="100%" height="100%"
                 variableRowHeight="true"
            >
        <mx:columns>
            <mx:DataGridColumn headerText="Position" dataField="position" width="30"/>
            <mx:DataGridColumn headerText="Id" dataField="id" width="50"/>
            <mx:DataGridColumn headerText="State" dataField="state" width="150"/>
            <mx:DataGridColumn headerText="Title" dataField="title" wordWrap="true"/>
            <mx:DataGridColumn headerText="last completed model" dataField="lastCompletedModel"/>
        </mx:columns>
    </mx:DataGrid>

    <mx:HBox width="100%" horizontalAlign="right" verticalAlign="middle">
        <mx:Label id="removeResult" fontStyle="italic" width="100%"/>
        <mx:Spacer width="100%"/>
        <mx:LinkButton id="buttonRemoveFromQueue"
                       label="Remove from Queue"
                       enabled="{expGrid.selectedItem!=null}"
                       toolTip="Remove the selected experiment from the queue"
                       click="{removeFromQueue(expGrid.selectedItem)}"
                       icon="@Embed('/img/icons/seamless-delete.gif')"
                       disabledIcon="@Embed('/img/icons/seamless-delete-greyed.gif')"
                />
        <mx:LinkButton label="Refresh"
                       click="{refresh()}"
                       enabled="{!_refreshInProgress}"
                       icon="@Embed('/img/icons/seamless-sync.gif')"
                       disabledIcon="@Embed('/img/icons/seamless-sync-greyed.gif')"
                />
    </mx:HBox>

</mx:VBox>
