<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: QueueThreadManagement.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300"
         show="ExperimentQueueThreadServiceSingleton">

    <!--
	QueueThreadManagement is a window service monitor.
	The window service should be installed on the same machine where the web
	application server (Gromit) is installed.
	With this console is possible: "Turn on", "Turn off", "Restart", "Synchronize"
	the window service.
	Note: "Synchronize" is used to be syncronized with the current state of the server
	(pulling approach).
    -->
    <mx:Script>
		<![CDATA[		
        import org.seamless_ip.services.remoting.RequestProgressEvent;

        [Bindable]
        private var _experimentQueueThreadService:ExperimentQueueThreadService;

        public function get ExperimentQueueThreadServiceSingleton():ExperimentQueueThreadService
        {
            if (_experimentQueueThreadService == null)
            {
                _experimentQueueThreadService = new ExperimentQueueThreadService();
                _experimentQueueThreadService.addEventListener(RequestProgressEvent.REQUEST_SEND, reqsend);
                _experimentQueueThreadService.addEventListener(RequestProgressEvent.REQUEST_COMPLETED, reqcompleted);
                _experimentQueueThreadService.check();
            }
            return _experimentQueueThreadService;
        }

        private function reqcompleted(event:RequestProgressEvent):void
        {
            setVisibility();

            if (ExperimentQueueThreadServiceSingleton.runningprocess == -1)
                loglabel.text = ExperimentQueueThreadService.NOTSYNCMSG;
            else
                loglabel.text = (String)(event.token);

            consolelog.dataProvider = ExperimentQueueThreadServiceSingleton.consoleoutput;
            ;
        }

        private function reqsend(event:RequestProgressEvent):void
        {

            turnonbtn.enabled = false;
            turnoffbtn.enabled = false;
            syncbtn.enabled = false;
            restartbtn.enabled = false;
            consolelog.dataProvider = null;

            statelabel.text = "waiting...";
            statelabel.setStyle("color", 0x000000);

            if (ExperimentQueueThreadServiceSingleton.runningprocess == -1)
                loglabel.text = ExperimentQueueThreadService.NOTSYNCMSG;
            else
                loglabel.text = event.message;
        }

        private function setVisibility():void
        {
            if (ExperimentQueueThreadServiceSingleton.runningprocess == -1) {
                statelabel.text = "OUTOFSYNC";
                statelabel.setStyle("color", 0xFF0000);
                turnonbtn.enabled = false;
                turnoffbtn.enabled = false;
                restartbtn.enabled = false;
                syncbtn.enabled = true;
            }
            else if (ExperimentQueueThreadServiceSingleton.runningprocess == 0) {
                statelabel.text = "STOPPED";
                statelabel.setStyle("color", 0xFF0000);
                turnonbtn.enabled = true;
                turnoffbtn.enabled = false;
                restartbtn.enabled = false;
                syncbtn.enabled = false;
            }
            else {
                statelabel.text = "RUNNING";
                statelabel.setStyle("color", 0x00FF00);
                turnonbtn.enabled = false;
                turnoffbtn.enabled = true;
                restartbtn.enabled = true;
                syncbtn.enabled = false;
            }
        }
		]]>
		
	</mx:Script>

    <mx:HBox width="100%"
             horizontalAlign="right">
        <mx:Label id="statelabel"
                  fontSize="31" text="STATE" fontStyle="italic">
        </mx:Label>
    </mx:HBox>
    <mx:HBox id="queuecontrols"
             width="100%"
             horizontalAlign="left">
        <mx:LinkButton id="turnonbtn"
                       label="Turn on"
                       click="{ExperimentQueueThreadServiceSingleton.start()}"
                       toolTip="{ExperimentQueueThreadService.TURNONMSG}"
                       enabled="false"/>
        <mx:LinkButton id="turnoffbtn"
                       label="Turn off"
                       click="{ExperimentQueueThreadServiceSingleton.stop()}"
                       toolTip="{ExperimentQueueThreadService.TURNOFFMSG}"
                       enabled="false"/>
        <mx:LinkButton id="restartbtn"
                       label="Restart"
                       click="{ExperimentQueueThreadServiceSingleton.restart()}"
                       toolTip="{ExperimentQueueThreadService.RESTARTMSG}"
                       enabled="false"/>
        <mx:LinkButton id="syncbtn"
                       label="Synchronize"
                       click="{ExperimentQueueThreadServiceSingleton.check()}"
                       toolTip="{ExperimentQueueThreadService.CHECKMSG}"
                       enabled="true" icon="@Embed('/img/icons/synced.gif')"/>
    </mx:HBox>
    <mx:HBox width="100%"
             horizontalAlign="left">
        <mx:Label id="loglabel"/>
    </mx:HBox>
    <mx:HBox width="100%"
             horizontalAlign="left">
        <mx:List id="consolelog" width="100%"
                 selectable="false"
                 editable="false"
                 backgroundColor="#000000" color="#FFFFFF" fontFamily="Arial" fontWeight="normal" fontStyle="normal"/>
    </mx:HBox>
</mx:VBox>