<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: SpatialLevelFrm.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->

<mx:TitleWindow height="100%"
                layout="vertical"
                title="Spatial level"
                width="100%"
                xmlns:mx="http://www.adobe.com/2006/mxml">

    <mx:Script>
        <![CDATA[
        import mx.managers.PopUpManager;

        import org.seamless_ip.services.transferobjects.pica.InstitutionalCompatibility;
        import org.seamless_ip.services.transferobjects.pica.PICASpatialLevel;

        private function init():void {
            if (!picaInstCompService.hasEventListener(PicaInstCompEvent.CREATEPICASPATIALLEVELCOMPLETE)) {
                picaInstCompService.addEventListener(PicaInstCompEvent.CREATEPICASPATIALLEVELCOMPLETE, createPicaSpatialLevelcompleteHandler);
            }
        }

        private var _institutionalCompatibility:InstitutionalCompatibility = null;

        public function set institutionalCompatibility(institutionalCompatibility:InstitutionalCompatibility):void {
            _institutionalCompatibility = institutionalCompatibility;
        }

        [Bindable]
        public function get institutionalCompatibility():InstitutionalCompatibility {
            return _institutionalCompatibility;
        }

        public function set spatialLevel(picaspatiallevel:PICASpatialLevel):void {
            _picaSpatialLevel = picaspatiallevel;
        }

        [Bindable]
        private var _picaSpatialLevel:PICASpatialLevel = null;
        [Bindable]
        public var picaInstCompService:PicaInstCompService = null;

        private function save():void {
            init();
            if (_picaSpatialLevel.id == null) {
                institutionalCompatibility.PICASpatialLevels.addItem(_picaSpatialLevel);
            }
            _picaSpatialLevel.fromInstitutionalCompability = institutionalCompatibility;
            setValues();
            picaInstCompService.updatePICASpatialLevel(_picaSpatialLevel);
        }

        private function setValues():void {
            _picaSpatialLevel.name = txtName.text;
            _picaSpatialLevel.description = txtDescription.text;
            _picaSpatialLevel.classification = txtClassification.text;
        }

        public function createPicaSpatialLevelcompleteHandler(event:PicaInstCompEvent):void {
            _picaSpatialLevel = picaInstCompService.picaSpatialLevel;
            close();
        }

        [Bindable]
        public var isEditing:Boolean = false;

        private function close():void {
            var picaE:PicaInstCompEvent = new PicaInstCompEvent(PicaInstCompEvent.FORCEREFRESH);
            dispatchEvent(picaE);
            PopUpManager.removePopUp(this);
        }
        ]]>
    </mx:Script>

    <mx:Form height="100%"
             width="100%">
        <mx:FormItem label="Name">
            <mx:TextInput id="txtName"
                          text="{_picaSpatialLevel.name}"
                          width="100%"/>
        </mx:FormItem>
        <mx:FormItem label="Description">
            <mx:TextArea height="152"
                         id="txtDescription"
                         text="{_picaSpatialLevel.description}"
                         width="100%"/>
        </mx:FormItem>
        <mx:FormItem label="Classification"
                     width="100%">
            <mx:TextInput id="txtClassification"
                          text="{_picaSpatialLevel.classification}"
                          width="100%"/>
        </mx:FormItem>
        <mx:FormItem>
            <mx:HBox horizontalAlign="right"
                     verticalAlign="bottom"
                     width="100%">
                <mx:Button click="{close()}"
                           disabledIcon="@Embed('/img/icons/delete_edit_d.gif')"
                           icon="@Embed('/img/icons/delete_edit.gif')"
                           label="Discard"
                           toolTip="Discard all changes"/>
                <mx:Button click="{save()}"
                           disabledIcon="@Embed('/img/icons/save_edit_d.gif')"
                           icon="@Embed('/img/icons/save_edit.gif')"
                           id="btnSave"
                           label="Save"
                           toolTip="Save all changes"/>
            </mx:HBox>
        </mx:FormItem>
    </mx:Form>
</mx:TitleWindow>
