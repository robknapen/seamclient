<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ wallace: RadiobuttonRenderer.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->
<mx:HBox
        xmlns:mx="http://www.adobe.com/2006/mxml"
        width="100%"
        height="100%"
        horizontalAlign="center"
        verticalAlign="middle"
        >

    <!--
    An item renderer that represents an object that can be selected with a
    RadioButton.
    -->
    <mx:Script>
	  	<![CDATA[
        import mx.collections.ArrayCollection;

        import org.seamless_ip.services.transferobjects.seamproj.ContextNarrative;
        import org.seamless_ip.services.transferobjects.seamproj.OutlookNarrative;
        import org.seamless_ip.services.transferobjects.seamproj.PolicyOptionNarrative;

        public static var myradiobuttongroup_policy:ArrayCollection = new ArrayCollection();
        public static var myradiobuttongroup_context:ArrayCollection = new ArrayCollection();
        public static var myradiobuttongroup_outlook:ArrayCollection = new ArrayCollection();


        [Bindable]
        public var editable:Boolean = true;

        public function get selected():Boolean
        {
            return cb.selected;
        }

        /**
         * Overrides the setter for the data property to ensure that the
         * selected property of the checkbox matches the value of the
         * selected property of the represented object.
         *
         * @param value Object to set as data
         */
        override public function set data(value:Object):void
        {
            if (value != null)
            {
                super.data = value;

                if ((value is PolicyOptionNarrative) ||
                    (value is ContextNarrative) ||
                    (value is OutlookNarrative)) {
                    cb.data = value;

                    if (value is PolicyOptionNarrative)
                        myradiobuttongroup_policy.addItem(this);
                    else if (value is ContextNarrative)
                        myradiobuttongroup_context.addItem(this);
                    else if (value is OutlookNarrative)
                            myradiobuttongroup_outlook.addItem(this);

                } else
                {
                    super.data = null;

                    this.cb.visible = false;//only Outlook, PolicyOption and Context items wills have the RadioButton
                }
            }
            else
                super.data = null;
        }


        /**
         * Event handler to dispatch a change event on mouse clicks on the
         * checkbox.
         */
        private function onClick(e:MouseEvent):void
        {
            dispatchEvent(new Event('change'));
        }

        //to have one visible radio button checked, per group
        private function valueCommitHandler(e:Event):void
        {
            var item: RadiobuttonRenderer;

            if (data != null)
            {
                if ((data is PolicyOptionNarrative) && (PolicyOptionNarrative(data).selected != cb.selected))
                {
                    PolicyOptionNarrative(data).selected = cb.selected;
                    if (cb.selected)
                        for each (item in myradiobuttongroup_policy)
                        {
                            if ((item.data != null) && (item.data != this.data))
                                item.cb.selected = false;
                        }
                }
                if ((data is ContextNarrative) && (ContextNarrative(data).selected != cb.selected))
                {
                    ContextNarrative(data).selected = cb.selected;
                    if (cb.selected)
                        for each (item in myradiobuttongroup_context)
                        {
                            if ((item.data != null) && (item.data != this.data))
                                item.cb.selected = false;
                        }
                }
                if ((data is OutlookNarrative) && (OutlookNarrative(data).selected != cb.selected))
                {
                    OutlookNarrative(data).selected = cb.selected;
                    if (cb.selected)
                        for each (item in myradiobuttongroup_outlook)
                        {
                            if ((item.data != null) && (item.data != this.data))
                                item.cb.selected = false;
                        }
                }
            }
        }
	  	]]>
	</mx:Script>

    <mx:RadioButton id="cb"
                    enabled="{editable}"
                    selected="{data.selected}"
                    toolTip="Select this item"
                    width="16" height="16"
                    valueCommit="valueCommitHandler(event)"/>

</mx:HBox>
