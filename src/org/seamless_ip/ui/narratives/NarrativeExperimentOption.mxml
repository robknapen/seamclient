<?xml version="1.0" encoding="utf-8"?>

<!--
  ~ wallace: NarrativeExperimentOption.mxml
  ~ ==============================================================================
  ~ This work has been carried out as part of the SEAMLESS Integrated Framework
  ~ project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
  ~ of the SEAMLESS association.
  ~
  ~ Copyright (c) 2009 The SEAMLESS Association.
  ~
  ~ For more information: http://www.seamlessassociation.org;
  ~ email: info@seamless-if.org
  ~
  ~ The contents of this file is subject to the SEAMLESS Association License for
  ~ software infrastructure and model components Version 1.1 (the "License");
  ~ you may not use this file except in compliance with the License. You may
  ~ obtain a copy of the License at http://www.seamlessassociation.org/License.htm
  ~
  ~ Software distributed under the License is distributed on an "AS IS"  basis,
  ~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  ~ the specific governing rights and limitations.
  ~
  ~ The Initial Developers of the Original Code are:
  ~  - Benny Johnsson; Lund University
  ~  - Rob Knapen; Alterra, Wageningen UR
  ~  - Michiel Rop; Alterra, Wageningen UR / ilionX
  ~  - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
  ~ ================================================================================
  ~ Contributor(s): N/A
  ~ ================================================================================
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:ns1="views.experiments.*"
         height="100%"
         width="100%">

    <mx:Metadata>
        [Event(name="change")]
    </mx:Metadata>

    <mx:Script>
		<![CDATA[
        import flash.events.KeyboardEvent;

        import mx.collections.ArrayCollection;
        import mx.events.CollectionEvent;

        import org.seamless_ip.services.remoting.RequestProgressEvent;
        import org.seamless_ip.services.transferobjects.seamproj.NarrativeOption;

        /*setted as false for pop up dlg of Experiment Designer*/
        [Bindable]
        private var _editable:Boolean = true;

        public function set editable(editable:Boolean):void
        {
            _editable = editable;
        }


        [Bindable]
        private var _gridsource:ArrayCollection = new ArrayCollection();

        public function set gridsource(value:ArrayCollection):void
        {
            if (_gridsource != value)
            {
                _gridsource = value;
                _gridsource.addEventListener(CollectionEvent.COLLECTION_CHANGE, changed);
            }
        }


        public function restoreValues():void {
            /*				if (this.initialized) {
             cloneOptions(_narrativeOptionServices.narrativeoptions, _gridsource);
             _modified = false;
             }    */
        }

        public function saveValues():void {

            //to prevent the user to wrongly save data into table narrativeoption
            //we make some check:
            //- if a narrativeoption has fields option and value null it is removed
            //  from the list and it won't be saved
            //- if a narrativeoption has fields option or value null the null
            //  field is setted to empty string (to avoid saving null values in the database)
            var dirtyrowonthelist: Boolean = true;

            while (dirtyrowonthelist == true)
            {
                var dirtyrowindex: Number = -1;

                for (var index:Number = 0; index < _gridsource.length; index++)
                {
                    if ((NarrativeOption(_gridsource.getItemAt(index)).option == null) || (NarrativeOption(_gridsource.getItemAt(index)).value == null))
                    {
                        dirtyrowindex = index;
                        break;
                    }
                }
                if (dirtyrowindex != -1)
                {
                    if ((NarrativeOption(_gridsource.getItemAt(dirtyrowindex)).option == null) && (NarrativeOption(_gridsource.getItemAt(dirtyrowindex)).value == null))
                        _gridsource.removeItemAt(dirtyrowindex);
                    else if (NarrativeOption(_gridsource.getItemAt(dirtyrowindex)).option == null)
                        NarrativeOption(_gridsource.getItemAt(dirtyrowindex)).option = "";
                    else if (NarrativeOption(_gridsource.getItemAt(dirtyrowindex)).value == null)
                            NarrativeOption(_gridsource.getItemAt(dirtyrowindex)).value = "";
                }
                else
                    dirtyrowonthelist = false;
            }
        }

        private function cloneOptions(fromOptions:ArrayCollection, toOptions:ArrayCollection):void {
            //				var wrk:NarrativeOptionModel;
            //				toOptions.removeAll();
            //				for (var i:int=0; i<fromOptions.length; i++) {
            //					wrk = new NarrativeOptionModel();
            //					wrk.id = ((NarrativeOptionModel)(fromOptions.getItemAt(i))).id;
            //					wrk.option = ((NarrativeOptionModel)(fromOptions.getItemAt(i))).option;
            //					wrk.value = ((NarrativeOptionModel)(fromOptions.getItemAt(i))).value;
            //					toOptions.addItem(wrk);
            //				}
        }

        private function keyPressed(event: KeyboardEvent):void {
            if (event.charCode == Keyboard.TAB) {
                if ((grid.editedItemPosition != null/*to avoid null object refernce*/) &&
                    (grid.editedItemPosition.columnIndex == 1/*last column*/) &&
                    (grid.editedItemPosition.rowIndex == _gridsource.length - 1/*last avilable row*/)) {
                    addOption();
                    /*add a new row on the datasource*/
                }
            }
        }

        private function addOption():void {
            var wrk:NarrativeOption = new NarrativeOption();
            _gridsource.addItem(wrk);
        }

        private function addRow():void {
            addOption();

            grid.scrollToIndex(_gridsource.length);
        }


        private function removeOption():void {
            _gridsource.removeItemAt(grid.selectedIndex);
        }


        private function changed(event:CollectionEvent):void {
            this.dispatchEvent(new Event('change'));
        }

        private function requestProgressEventHandler(event:RequestProgressEvent):void
        {


            if (event.type == RequestProgressEvent.REQUEST_COMPLETED) {

                if (event.token.marker == "saveall") {
                    /*	labelStatus.setStyle("color", 0x808080);
                     labelStatus.text = event.message;*/
                }
                if (event.token.marker == "update") {
                    //						_gridsource.removeEventListener(CollectionEvent.COLLECTION_CHANGE, changed);
                    //						cloneOptions(_narrativeOptionServices.narrativeoptions, _gridsource);
                    //						_gridsource.addEventListener(CollectionEvent.COLLECTION_CHANGE, changed);
                    //						_modified = false;
                }

            }


        }
			
			
		]]>
	</mx:Script>


    <mx:DataGrid id="grid" width="100%"
                 editable="{_editable}"
                 dataProvider="{_gridsource}"
                 keyDown="keyPressed(event)" variableRowHeight="true" wordWrap="true">
        <mx:columns>
            <mx:DataGridColumn headerText="Name" dataField="value"/>
            <mx:DataGridColumn headerText="Narrative specification" dataField="option"/>
        </mx:columns>
    </mx:DataGrid>

    <mx:HBox width="100%" horizontalAlign="right" visible="{_editable}">
        <mx:Spacer width="100%"/>
        <mx:LinkButton id="buttonAdd"
                       label="Add a row"
                       toolTip="Add a Characteristic from this Narrative Experiment"
                       click="addRow()"
                       icon="@Embed('/img/icons/add_obj.gif')"
                       disabledIcon="@Embed('/img/icons/add_obj_d.gif')"
                />


        <mx:LinkButton id="buttonRemove"
                       label="Remove a row"
                       toolTip="Remove a characteristic from this narrative experiment"
                       enabled="{grid.selectedItem != null}"
                       click="removeOption()"
                       icon="@Embed('/img/icons/delete_edit.gif')"
                       disabledIcon="@Embed('/img/icons/delete_edit_d.gif')"
                />
        <mx:VRule height="16"/>
    </mx:HBox>


</mx:VBox>
